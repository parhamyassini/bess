# Copyright (c) 2014-2017, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Description: Orca multicast receiver for measurements. Used in the following experiments:
# Note: RSS not used in these experiments (latency not critical), randomly split the packets to workers.
#       therfore, ip_encap=False.
#
#   CONCURRENCY_PARAM=3. This parameter sets the number of parallel pipleines for processing.
#
# - Agent CPU cyles:
#   NUM_SESSIONS=1M.
#   SESSION_ID_BASE: Same base ID as set in orca_tx.bess
#   mdc_pkt_gen: disabled. (Contorl plane communication is not needed)
#   
# - Any expriment that throughput is measurement on receiver side (e.g failover performance, Rx throughput).
#   Run this script on all of the multicast receivers.
#   On the active agent, the bess logs will show the CPU cycles. 
#   On other receivers, receive throughput in intervals is logged in a file after exiting the script.
#   NUM_SESSIONS=1. 
#   $ORCA_CONTROLLER_TIMEOUT= Used only for output log files.

import mdcpkts
import os
import csv
# Agent IDs we use 
# port1: 4
# port2: 16
# port3: 64
AGENT_ID = 0
AGENT_LABEL = 0
AGENT_NIC = '0000:7e:00.0'
SWITCH_MAC = '06:a6:7e:72:37:92'
AGENT_MAC = '06:9f:da:98:a4:76'

RESULTS_BASE_DIR = '/home/pyassini/results/'
TOTAL_PKT_SIZE = 1024
CONCURRENCY_PARAM = 3
# If set ACTIVE_AGENT to 0 the agent wont ping and it will not be selected as active agent 
# (For experiments we want one machine to only be the receiver and active agent will be the two other machines)
ACTIVE_AGENT = 1
CONTROLLER_TIMEOUT = 75
PING_PKT_RATE = 2.5e3

SESSION_ID_BASE = '02:53:00:'
NUM_SESSIONS = 1000000 # 1M sessions
try:
    TOTAL_PKT_SIZE = int(os.getenv('ORCA_DATA_PKT_SIZE', None))
except:
    print("Error: variable ORCA_DATA_PKT_SIZE not set")
    exit(1)
try:
    CONTROLLER_TIMEOUT = int(os.getenv('ORCA_CONTROLLER_TIMEOUT', None))
except:
    print("Error: variable ORCA_CONTROLLER_TIMEOUT not set")
    exit(1)
try:
    ACTIVE_AGENT = int(os.getenv('ORCA_IS_ACTIVE_AGENT', None))
except:
    print("Error: variable ORCA_IS_ACTIVE_AGENT not set")
    exit(1)
try:
    AGENT_ID = int(os.getenv('ORCA_AGENT_ID', None))
    AGENT_LABEL = AGENT_ID
except:
    print("Error: variable ORCA_AGENT_ID not set")
    exit(1)

print("This Orca agent with throughput measurement script")

pkt_template = mdcpkts.make_mdc_unlabeled_data_pkt(label=0x50505001,
                                                    pkt_len=0,
                                                    src_mac='06:16:3e:1b:72:32',
                                                    dst_mac='02:53:55:4d:45:02') 
ping_pkt = mdcpkts.make_mdc_ping_pkt(agent=AGENT_ID,
                                     src_mac='F8:F2:1E:3C:0E:84',
                                     dst_mac='02:53:55:4d:45:01')
ping_pkt_bytes = bytes(ping_pkt)

# If in NUMA system, ensure to use CPU cores in the same socket of your NIC.
# TODO: this needs to depend on the CPU layout and where the NIC is.
num_cores = CONCURRENCY_PARAM * 2 + 3
start_core = 0
print('Core count = %d' % num_cores)
for i in range(num_cores):
    bess.add_worker(wid=i, core=i + start_core)

# Define Ports and Queues
port0::PMDPort(port_id=0, num_inc_q=1, num_out_q=3, size_inc_q=4096, size_out_q=4096)
port0_inc0::QueueInc(port=port0, qid=0, prefetch=1)

port0_out_arr = []
gates_arr = []
orca_throughput_arr = []
mdc_rec_arr = []
for i in range(CONCURRENCY_PARAM):
    port0_out = QueueOut(port=port0, qid=i)
    port0_out_arr.append(port0_out)
    gates_arr.append(i)

port0_inc0 -> Queue(size=16384) -> rs::RandomSplit(drop_rate=0.0, gates=gates_arr)

session_idx = 0

for i in range(CONCURRENCY_PARAM):
    mdc_receiver = MdcReceiver(agent_id=AGENT_ID,
                           agent_label=AGENT_LABEL,
                           switch_mac=SWITCH_MAC,
                           agent_mac=AGENT_MAC,
                           enable_measurement=((i==0) and (ACTIVE_AGENT)))
    session_idx = 0
    for a in range(256):
        if session_idx >= NUM_SESSIONS:
            break;
        for b in range(256):
            if session_idx >= NUM_SESSIONS:
                break;
            for c in range(256): 
                if session_idx >= NUM_SESSIONS:
                    break;
                session_id = SESSION_ID_BASE+ "%02x:%02x:%02x" % (a,b,c)
                session_idx += 1
                mdc_receiver.add(entries=[{'addr': session_id, 'label': 0x50505054}])
    if ACTIVE_AGENT:
        if (i==0):
            
            mdc_receiver.add(entries=[{'addr': '02:53:55:4d:45:01', 'label': 0x50505054}])
            print("Added sessions: " + str(session_idx))
        else:
            mdc_receiver.add(entries=[{'addr': '02:53:55:4d:45:01', 'label': 0x50505054}])
            
        if i == 0:
            #mdc_pkt_gen::MdcPktGen(template=ping_pkt_bytes, pps=PING_PKT_RATE)
            rs:i -> q_0::Queue(size=16384) -> 1:mdc_receiver:1 -> Sink()
            #mdc_pkt_gen -> q_0
        else:
            rs:i -> Queue(size=16384) -> 1:mdc_receiver:1 -> Sink()
    else: 
        ot = OrcaThroughput()
        rs:i -> Queue(size=16384) -> 1:mdc_receiver:1 -> ot -> Sink()
        orca_throughput_arr.append(ot)
    mdc_receiver:0 -> Queue(size=16384) -> port0_out_arr[i]
    mdc_rec_arr.append(mdc_receiver)


if not ACTIVE_AGENT:
    bess.resume_all()

    # Measurement script:
    result_cpu = []
    result_tick_cpu = []
    result_tick_throughput = []
    result_pps = []
    result_bps = []
    
    # Workaround to save the results on the file when hit "ctrl + C"

    try: 
        last_read_throughput = 0
        last_read_mdc = 0
        last_bits = [0, 0, 0, 0]
        last_pkts = [0, 0, 0, 0]
        total_pkt = 0
        total_cycle = 0
        total_cycle_per_pkt = 0.0
        while True:
            ret_arr = []
            # get_summary() doesn't require workers to be stopped
            for i in range(CONCURRENCY_PARAM):
                ret_t = orca_throughput_arr[i].get_latest(clear=False)
                ret_arr.append(ret_t)
            
            # if ret_arr[0].timestamp - last_read_throughput >= 1e6: # Every 1 ms (1e6 ns)
            total_pps = 0
            total_bps = 0
            for i in range(CONCURRENCY_PARAM):
                total_pps += (ret_arr[i].packets - last_pkts[i])
                total_bps += (ret_arr[i].bytes * 8.0) - last_bits[i]
                last_pkts[i] = ret_arr[i].packets
                last_bits[i] = (ret_arr[i].bytes * 8.0)
            #print('%12.6f: %5.3f Mpps, %8.3f Mbps, ' % (diff_ns, total_pps, total_bps))
            result_tick_throughput.append(ret_arr[0].timestamp)
            result_bps.append(total_bps)
            result_pps.append(total_pps)
            last_read_throughput = ret_arr[0].timestamp
                
    except KeyboardInterrupt:
        throughput_results_path = RESULTS_BASE_DIR + 'throughput_size_' + str(TOTAL_PKT_SIZE) + '_k_' + str(CONTROLLER_TIMEOUT) + '.csv'
        cpu_results_path = RESULTS_BASE_DIR + 'cpu_size_' + str(TOTAL_PKT_SIZE) + '.csv'
        with open(throughput_results_path, 'wb') as file:
            fieldnames = ['timestamp', 'pkts', 'bits']
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            for i in range(len(result_tick_throughput)):
                writer.writerow({
                    'timestamp': result_tick_throughput[i],
                    'pkts': result_pps[i],
                    'bits': result_bps[i]
                })
        if ACTIVE_AGENT: 
            with open(cpu_results_path, 'wb') as file:
                fieldnames = ['timestamp', 'cycle_per_pkt']
                writer = csv.DictWriter(file, fieldnames=fieldnames)
                writer.writeheader()
                for i in range(len(result_tick_cpu)):
                    writer.writerow({
                        'timestamp': result_tick_cpu[i],
                        'cycle_per_pkt': result_cpu[i]
                    })

